#!/usr/bin/env bash
#
# Siddharth Dushantha 2020
# 
# https://github.com/sdushantha/bin
#

# modified for mac
# based off of: https://github.com/sdushantha/bin/blob/master/utils/ocr

DARK=0
if [[ "$1" == "--dark" ]]; then
    DARK=1
fi

TEXT_FILE="/tmp/ocr.txt"
IMAGE_FILE="/tmp/ocr.png"

_notify () {
    if [[ "$(uname -s)" == "Darwin" ]]; then
        osascript -e "display notification \"$2\" with title \"$1\""
    else
        notify-send "$1" "$2"
    fi
}

# Check if the needed dependencies are installed
if [[ "$(uname -s)" == "Darwin" ]]; then
    dependencies=(tesseract screencapture pbcopy)
else
    dependencies=(tesseract maim xclip)
fi

if [[ "$DARK" -eq 1 ]]; then
    # part of imagemagick suite
    dependencies+=(convert)
fi

for dependency in "${dependencies[@]}"; do
    type -p "$dependency" &>/dev/null || {
        # The reason why we are sending the error as a notification is because
        # user is most likely going to run this script by binding it to their
        # keyboard, therefor they cant see any text that is outputed using echo
        _notify "ocr" "Could not find '${dependency}', is it installed?"
        exit 1
    }
done

# Take screenshot by selecting the area
if [[ "$(uname -s)" == "Darwin" ]]; then
    screencapture -i "$IMAGE_FILE"
else
    maim -s "$IMAGE_FILE"
fi

# Get the exit code of the previous command.
# So in this case, it is the screenshot command. If it did not exit with an
# exit code 0, then it means the user canceled the process of taking a
# screenshot by doing something like pressing the escape key
STATUS=$?

# If the user pressed the escape key or did something to terminate the proccess
# taking a screenshot, then just exit
[ $STATUS -ne 0 ] && exit 1

# Do the magic (∩^o^)⊃━☆ﾟ.*･｡ﾟ
# Notice how I have removing the extension .txt from the file path. This is
# because tesseract adds .txt to the given file path anyways. So if we were to
# specify /tmp/ocr.txt as the file path, tesseract would out the text to 
# /tmp/ocr.txt.txt

# tesseract doesn't like light-on-dark text, so negate colors if we're given --dark flag 
if [[ "$DARK" -eq 1 ]]; then
    convert "$IMAGE_FILE" -channel RGB -negate "$IMAGE_FILE"
fi
tesseract "$IMAGE_FILE" "${TEXT_FILE//\.txt/}"


# Check if the text was detected by checking number
# of lines in the file

LINES=$(wc -l < $TEXT_FILE)
if [ "$LINES" -eq 0 ]; then
    _notify "ocr" "no text was detected"
    exit 1
fi

# Copy text to clipboard
if [[ "$(uname)" == "Darwin" ]]; then
    pbcopy < "$TEXT_FILE"
else
    xclip -selection clip < "$TEXT_FILE"
fi

# Send a notification with the text that was grabbed using OCR
_notify "ocr" "$(cat $TEXT_FILE)"

# Clean up
# "Always leave the area better than you found it" 
#                       - My first grade teacher
rm "$TEXT_FILE"
rm "$IMAGE_FILE"
